services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: durusuna_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: durusuna_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5433:5432"  # Use different port to avoid conflict
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/migrations:/docker-entrypoint-initdb.d/migrations:ro
    networks:
      - durusuna_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d durusuna_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: durusuna_redis
    restart: unless-stopped
    ports:
      - "6380:6379"  # Use different port to avoid conflict
    volumes:
      - redis_data:/data
    networks:
      - durusuna_network
    command: redis-server --appendonly yes --requirepass redis123
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO for object storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: durusuna_minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    networks:
      - durusuna_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: durusuna_backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432  # Internal port remains 5432
      DB_NAME: durusuna_dev
      DB_USER: postgres
      DB_PASSWORD: postgres123
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379  # Internal port remains 6379
      REDIS_PASSWORD: redis123
      
      # JWT Configuration
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRE: 7d
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-this-in-production
      JWT_REFRESH_EXPIRE: 30d
      
      # File Upload Configuration
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: 10485760
      
      # Backend Configuration
      BACKEND_PUBLIC_URL: http://localhost:3001
      
      # MinIO/S3 Configuration
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin123
      S3_BUCKET_NAME: durusuna-uploads
      S3_REGION: us-east-1
      
      # Logging
      LOG_LEVEL: debug
      
      # CORS
      CORS_ORIGIN: "*"
      
      # Email Configuration (for development)
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USER: 
      SMTP_PASS: 
      SMTP_FROM: noreply@durusuna.local
      
    volumes:
      - .:/app
      - /app/node_modules
      - /app/bun.lock
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - durusuna_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: durusuna_mailhog
    restart: unless-stopped
    platform: linux/amd64  # Fix for Apple Silicon
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - durusuna_network

  # Nginx reverse proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: durusuna_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - durusuna_network
    depends_on:
      - backend
    profiles:
      - production

  # Database Admin Tool
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: durusuna_pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@durusuna.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - durusuna_network
    depends_on:
      - postgres
    profiles:
      - tools

# Volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  pgadmin_data:
    driver: local

# Networks
networks:
  durusuna_network:
    driver: bridge 