services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: durusuna_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-durusuna_dev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5443:5432"  # Use different port to avoid conflict
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/migrations:/docker-entrypoint-initdb.d/migrations:ro
    networks:
      - durusuna_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d durusuna_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: durusuna_redis
    restart: unless-stopped
    ports:
      - "6380:6379"  # Use different port to avoid conflict
    volumes:
      - redis_data:/data
    networks:
      - durusuna_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO service removed - now using Sevalla/Cloudflare R2 for object storage

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: durusuna_backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      # Core Environment (matching cloud)
      NODE_ENV: development
      PORT: 3001
      
      # Database - Use DATABASE_URL like cloud but point to local
      DATABASE_URL: "postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/durusuna_dev"
      
      # Features (matching cloud)
      RUN_SEED_ON_START: ${RUN_SEED_ON_START:-true}
      DB_RESET_MODE: ${DB_RESET_MODE:-true}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      LOG_TO_CONSOLE: ${LOG_TO_CONSOLE:-true}
      NOTIF_CHANNELS_ENABLED: ${NOTIF_CHANNELS_ENABLED:-socket}
      NOTIF_OUTBOX_STARTUP_DELAY_MS: ${NOTIF_OUTBOX_STARTUP_DELAY_MS:-12000}
      
      # JWT (matching cloud)
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      
      # S3 Storage (matching cloud)
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      S3_REGION: ${S3_REGION}
      
      # CORS (matching cloud)
      CORS_ORIGIN: ${CORS_ORIGIN:-"*"}
      
      # Firebase (matching cloud)
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      FIREBASE_SERVICE_ACCOUNT_KEY: ${FIREBASE_SERVICE_ACCOUNT_KEY}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # File Upload Configuration
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: 10485760
      
      # Backend Configuration
      BACKEND_PUBLIC_URL: http://localhost:3001
      
      # Email Configuration (for development)
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USER: 
      SMTP_PASS: 
      SMTP_FROM: noreply@durusuna.local
      
    volumes:
      # Mount only source directories for hot reload, preserve dependency cache
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./start-production.sh:/app/start-production.sh
      # Preserve installed dependencies
      - /app/node_modules
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - durusuna_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: durusuna_mailhog
    restart: unless-stopped
    platform: linux/amd64  # Fix for Apple Silicon
    ports:
      - "1026:1025" # SMTP (avoid conflict with local MTA)
      - "8025:8025" # Web UI
    networks:
      - durusuna_network

  # Nginx reverse proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: durusuna_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - durusuna_network
    depends_on:
      - backend
    profiles:
      - production

  # Database Admin Tool
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: durusuna_pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@durusuna.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - durusuna_network
    depends_on:
      - postgres
    profiles:
      - tools

# Volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  pgadmin_data:
    driver: local

# Networks
networks:
  durusuna_network:
    driver: bridge 